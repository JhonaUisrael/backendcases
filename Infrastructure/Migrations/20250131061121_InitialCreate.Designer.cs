// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250131061121_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CasePriority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CaseState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseId");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Domain.CaseType", b =>
                {
                    b.Property<int>("CaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseTypeId");

                    b.ToTable("CasesTypes");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonIdentification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.PersonCase", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("PersonCases");
                });

            modelBuilder.Entity("Domain.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonTypeId");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("Domain.TaskCase", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("CaseId");

                    b.ToTable("TaskCases");
                });

            modelBuilder.Entity("Domain.Case", b =>
                {
                    b.HasOne("Domain.CaseType", "CasesType")
                        .WithMany("Cases")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasesType");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("Domain.PersonCase", b =>
                {
                    b.HasOne("Domain.Case", "Case")
                        .WithMany("PersonCases")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("PersonCases")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.TaskCase", b =>
                {
                    b.HasOne("Domain.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Domain.Case", b =>
                {
                    b.Navigation("PersonCases");
                });

            modelBuilder.Entity("Domain.CaseType", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("PersonCases");
                });

            modelBuilder.Entity("Domain.PersonType", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
